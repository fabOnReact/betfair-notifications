#!/usr/bin/env ruby
# PROJECT_ROOT = File.expand_path("../..", __FILE__)
PROJECT_ROOT = "/home/fabrizio/Documents/Sublime/Rails/betfair-notifications/" 
# $LOAD_PATH << PROJECT_ROOT 

require 'active_support/all'
# require 'sucker_punch'
# require 'sucker_punch/async_syntax'
# require 'sucker_punch-backgroundable'
require 'optparse'
require 'table_print'
require 'betfair'
require 'byebug'
require_relative '../lib/concerns/parser_message'
require_relative '../lib/concerns/error_message'
require_relative '../lib/jobs/report_job'
Dir.glob(File.join(PROJECT_ROOT, "lib", "*.rb")).each {|file| require_relative file }
Dir.glob(File.join(PROJECT_ROOT, "lib", "core_ext", "*.rb")).each {|file| require_relative file }

HTTPI.log = false
# SuckerPunch.logger = Logger.new('sucker_punch.log')
# SuckerPunch.shutdown_timeout = 100000 # of sec. to wait before killing threads

custom_parser = CustomParser.new do |parser|
  parser.banner = CustomParser::BETFAIR_CMD 
  parser.separator ""
  
  parser.separator "Commands"
  CustomParser::CMD_DESCRIPTIONS.each {|cmd| parser.separator cmd}

  parser.separator "Options"
  parser.separator "betfair events"

  # parser.events_options
  parser.capture_input(CustomParser::EVENTS_COUNTRIES){|string| string.split(',')}
  parser.capture_input CustomParser::EVENTS_TEXT
  
  parser.separator CustomParser::EVENTS_COUNTRY_OPT
  parser.separator ''

  parser.separator 'betfair catalog'
  parser.capture_input CustomParser::CATALOG_RESULTS
  parser.separator CustomParser::CATALOG_MARKET_OPT
  parser.capture_input(CustomParser::CATALOG_EVENTS) {|string| string.split(',')}
  parser.separator ''

  parser.separator 'betfair book'
  parser.capture_input(CustomParser::BOOK_MARKET) {|string| string.split(',')}
  parser.separator ''

  parser.separator 'betfair monitor'
  parser.separator CustomParser::MONITOR_EVENTS_OPT
  parser.capture_input(CustomParser::MONITOR_SELECTION){|string| string.split(',')}
  parser.capture_input(CustomParser::MONITOR_TARGET)
  parser.capture_input(CustomParser::MONITOR_MINUTES)
end

custom_parser.parse!
ApplicationController.new(ARGV[0], custom_parser)
